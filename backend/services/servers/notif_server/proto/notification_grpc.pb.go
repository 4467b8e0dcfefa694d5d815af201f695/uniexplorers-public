// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/notification.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotificationService_StreamNotification_FullMethodName  = "/NotificationService/StreamNotification"
	NotificationService_PublishNotification_FullMethodName = "/NotificationService/PublishNotification"
	NotificationService_AddNotifications_FullMethodName    = "/NotificationService/AddNotifications"
	NotificationService_GetNotifications_FullMethodName    = "/NotificationService/GetNotifications"
	NotificationService_AddSubscriber_FullMethodName       = "/NotificationService/AddSubscriber"
	NotificationService_GetSubscribers_FullMethodName      = "/NotificationService/GetSubscribers"
)

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	StreamNotification(ctx context.Context, in *StreamNotificationRequest, opts ...grpc.CallOption) (NotificationService_StreamNotificationClient, error)
	PublishNotification(ctx context.Context, in *PublishNotificationRequest, opts ...grpc.CallOption) (*PublishNotificationResponse, error)
	AddNotifications(ctx context.Context, in *AddNotificationsRequest, opts ...grpc.CallOption) (*AddNotificationsResponse, error)
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	AddSubscriber(ctx context.Context, in *AddSubscriberRequest, opts ...grpc.CallOption) (*AddSubscriberResponse, error)
	GetSubscribers(ctx context.Context, in *GetSubscribersRequest, opts ...grpc.CallOption) (*GetSubscribersResponse, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) StreamNotification(ctx context.Context, in *StreamNotificationRequest, opts ...grpc.CallOption) (NotificationService_StreamNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], NotificationService_StreamNotification_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceStreamNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationService_StreamNotificationClient interface {
	Recv() (*StreamNotificationResponse, error)
	grpc.ClientStream
}

type notificationServiceStreamNotificationClient struct {
	grpc.ClientStream
}

func (x *notificationServiceStreamNotificationClient) Recv() (*StreamNotificationResponse, error) {
	m := new(StreamNotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationServiceClient) PublishNotification(ctx context.Context, in *PublishNotificationRequest, opts ...grpc.CallOption) (*PublishNotificationResponse, error) {
	out := new(PublishNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationService_PublishNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) AddNotifications(ctx context.Context, in *AddNotificationsRequest, opts ...grpc.CallOption) (*AddNotificationsResponse, error) {
	out := new(AddNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_AddNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) AddSubscriber(ctx context.Context, in *AddSubscriberRequest, opts ...grpc.CallOption) (*AddSubscriberResponse, error) {
	out := new(AddSubscriberResponse)
	err := c.cc.Invoke(ctx, NotificationService_AddSubscriber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetSubscribers(ctx context.Context, in *GetSubscribersRequest, opts ...grpc.CallOption) (*GetSubscribersResponse, error) {
	out := new(GetSubscribersResponse)
	err := c.cc.Invoke(ctx, NotificationService_GetSubscribers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	StreamNotification(*StreamNotificationRequest, NotificationService_StreamNotificationServer) error
	PublishNotification(context.Context, *PublishNotificationRequest) (*PublishNotificationResponse, error)
	AddNotifications(context.Context, *AddNotificationsRequest) (*AddNotificationsResponse, error)
	GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error)
	AddSubscriber(context.Context, *AddSubscriberRequest) (*AddSubscriberResponse, error)
	GetSubscribers(context.Context, *GetSubscribersRequest) (*GetSubscribersResponse, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) StreamNotification(*StreamNotificationRequest, NotificationService_StreamNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamNotification not implemented")
}
func (UnimplementedNotificationServiceServer) PublishNotification(context.Context, *PublishNotificationRequest) (*PublishNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNotification not implemented")
}
func (UnimplementedNotificationServiceServer) AddNotifications(context.Context, *AddNotificationsRequest) (*AddNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedNotificationServiceServer) AddSubscriber(context.Context, *AddSubscriberRequest) (*AddSubscriberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubscriber not implemented")
}
func (UnimplementedNotificationServiceServer) GetSubscribers(context.Context, *GetSubscribersRequest) (*GetSubscribersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribers not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_StreamNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).StreamNotification(m, &notificationServiceStreamNotificationServer{stream})
}

type NotificationService_StreamNotificationServer interface {
	Send(*StreamNotificationResponse) error
	grpc.ServerStream
}

type notificationServiceStreamNotificationServer struct {
	grpc.ServerStream
}

func (x *notificationServiceStreamNotificationServer) Send(m *StreamNotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NotificationService_PublishNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).PublishNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_PublishNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).PublishNotification(ctx, req.(*PublishNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_AddNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).AddNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_AddNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).AddNotifications(ctx, req.(*AddNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotifications(ctx, req.(*GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_AddSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).AddSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_AddSubscriber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).AddSubscriber(ctx, req.(*AddSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_GetSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationService_GetSubscribers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetSubscribers(ctx, req.(*GetSubscribersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishNotification",
			Handler:    _NotificationService_PublishNotification_Handler,
		},
		{
			MethodName: "AddNotifications",
			Handler:    _NotificationService_AddNotifications_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _NotificationService_GetNotifications_Handler,
		},
		{
			MethodName: "AddSubscriber",
			Handler:    _NotificationService_AddSubscriber_Handler,
		},
		{
			MethodName: "GetSubscribers",
			Handler:    _NotificationService_GetSubscribers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNotification",
			Handler:       _NotificationService_StreamNotification_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/notification.proto",
}
