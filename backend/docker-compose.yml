version: '3.9'

services:
# --- SERVERS ---
  user-server:
    container_name: user-server
    image: jjlim159/uniexplorers-user-server
    build:
      context: ./services/servers/user_server
      dockerfile: Dockerfile
    env_file: ./services/server.env
    restart: on-failure
    ports: 
      - 8080:8080
    depends_on:
      ingestion:
        condition: service_completed_successfully
      seed-migration:
        condition: service_completed_successfully
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
      interval: 10s
      timeout: 10s
      retries: 5

  image-server:
    container_name: image-server
    image: jjlim159/uniexplorers-image-server
    build:
      context: ./services/servers/image_server
      dockerfile: Dockerfile
    env_file: ./services/java.env
    restart: on-failure
    ports:
      - 8081:8083
    command:  java -jar target/imageMicroservice-0.0.1-SNAPSHOT.jar

  uni-server:
    container_name: uni-server
    image: jjlim159/uniexplorers-uni-server
    build:
      context: ./services/servers/uni_server
      dockerfile: Dockerfile
    env_file: ./services/server.env
    restart: on-failure
    ports: 
      - 8082:8080
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      ingestion:
        condition: service_completed_successfully
      seed-migration:
        condition: service_completed_successfully

  forum-server:
    container_name: forum-server
    image: jjlim159/uniexplorers-forum-server
    build:
      context: ./services/servers/forum_server
      dockerfile: Dockerfile
    env_file: ./services/server.env
    restart: on-failure
    ports: 
      - 8083:8080
    depends_on:
      ingestion:
        condition: service_completed_successfully
      seed-migration:
        condition: service_completed_successfully
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
      interval: 10s
      timeout: 10s
      retries: 5

  location-server:
    container_name: location-server
    image: jjlim159/uniexplorers-location-server
    build:
      context: ./services/servers/location_server
      dockerfile: Dockerfile
    env_file: ./services/server.env
    restart: on-failure
    ports: 
      - 8084:8080
    depends_on:
      mongoseed:
        condition: service_completed_successfully
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
      interval: 10s
      timeout: 10s
      retries: 5

  chat-server:
    container_name: chat-server
    image: jjlim159/uniexplorers-chat-server
    build:
      context: ./services/servers/live_chat
      dockerfile: Dockerfile
    env_file: ./services/server.env
    restart: on-failure
    ports:
      - 8086:8080 #http
    depends_on:
      mongoseed:
        condition: service_completed_successfully
    healthcheck:
      test: curl --fail http://localhost:8080 || exit 1
      interval: 10s
      timeout: 10s
      retries: 5

  similarity-server:
    container_name: similarity-server
    image: jjlim159/uniexplorers-similarity-server
    build:
      context: ./services/servers/similarity
      dockerfile: Dockerfile
    env_file: 
      - ./services/redis.env
      - ./services/urls.env
      - ./services/server.env
    restart: on-failure
    ports:
      - 8088:8080
    depends_on:
      ingestion:
        condition: service_completed_successfully
      seed-migration:
        condition: service_completed_successfully
      cache:
        condition: service_healthy
      user-server:
        condition: service_healthy
      uni-server:
        condition: service_healthy
    command: uvicorn app:app --host 0.0.0.0 --port 8080

  recommender:
    container_name: recommender
    image: jjlim159/uniexplorers-recommender
    build:
      context: ./services/servers/recommendation
      dockerfile: Dockerfile
    env_file: ./services/urls.env
    ports:
      - 8085:8080
    depends_on:
      ingestion:
        condition: service_completed_successfully
      seed-migration:
        condition: service_completed_successfully
      uni-server:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:8080/api/healthcheck || exit 1
      interval: 10s
      timeout: 10s
      retries: 5

  auth-server:
    container_name: clerk-auth
    image: jjlim159/uniexplorers-auth-server
    build: 
      context: ./services/servers/auth
      dockerfile: Dockerfile
    env_file: ./services/auth.env
    ports:
      - 8089:8089
    restart: on-failure

# --- DATABASES ---

  mongodb:
    container_name: mongodb
    image: jjlim159/uniexplorers-mongodb
    build:
      context: ./services/databases/mongodb
      dockerfile: Dockerfile
    env_file: ./services/mongo.env
    restart: on-failure
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: echo 'db.stats().ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      
  user-db:
    container_name: user-database
    image: jjlim159/uniexplorers-user-db
    build:
      context: ./services/databases/user_db
      dockerfile: Dockerfile
    volumes:
      - user-pg-data:/var/lib/postgresql/data
    ports: 
      - 5432:5432
    env_file: ./services/user_db.env
    # expose:
    #   - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  forum-db:
    container_name: forum-database
    image: jjlim159/uniexplorers-forum-db
    build:
      context: ./services/databases/forum_db
      dockerfile: Dockerfile
    volumes:
      - forum-pg-data:/var/lib/postgresql/data
    ports: 
      - 5433:5432
    env_file: ./services/forum_db.env
    # expose:
    #   - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  uni-db:
    container_name: uni-database
    image: jjlim159/uniexplorers-uni-db
    build:
      context: ./services/databases/uni_db
      dockerfile: Dockerfile
    volumes:
      - uni-pg-data:/var/lib/postgresql/data
    ports: 
      - 5434:5432
    env_file: ./services/uni_db.env
    # expose:
    #   - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

# --- UTILITY ---

  mongoseed:
    container_name: mongoseed
    image: jjlim159/uniexplorers-mongoseed
    build:
      context: ./services/util/mongodb_seed
      dockerfile: Dockerfile
    env_file: ./services/mongo.env
    restart: on-failure
    depends_on:
      mongodb:
        condition: service_healthy

  cache:
    container_name: cache
    image: jjlim159/uniexplorers-cache
    build:
      context: ./services/util/cache
      dockerfile: Dockerfile
    env_file:
      - ./services/redis.env
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$$REDIS_PASSWORD", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: /bin/sh -c "redis-server --requirepass $$REDIS_PASSWORD"

  seed-migration:
    container_name: uniexplorers-seed-migration
    image: jjlim159/uniexplorers-seed-migration
    build:
      context: ./services/util/seed_migration
      dockerfile: Dockerfile
    env_file: ./services/server.env
    depends_on:
      user-db:
        condition: service_healthy
      forum-db:
        condition: service_healthy
      uni-db:
        condition: service_healthy
    command: /bin/sh -c "./seed_migrate.sh"

  ingestion:
    container_name: uniexplorers-ingestion
    image: jjlim159/uniexplorers-ingestion
    build:
      context: ./services/util/populate_db
      dockerfile: Dockerfile
    env_file: ./services/server.env
    depends_on:
      seed-migration:
        condition: service_completed_successfully
    command: python ingest.py
    

  scraper:
    container_name: scraper
    image: jjlim159/uniexplorers-scraper
    build:
      context: ./services/scraper
      dockerfile: Dockerfile
    env_file:
      - ./services/scraper.env
      - ./services/mongo.env
    command: python scheduler.py
    depends_on: 
      mongodb:
        condition: service_healthy

  broker:
    image: rabbitmq:3-management
    container_name: broker
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
  
  notif-server:
    container_name: notif-server
    image: jjlim159/uniexplorers-notif-server
    build:
      context: ./services/servers/notif_server
      dockerfile: Dockerfile
    env_file: ./services/notif.env
    ports:
      - 8099:8080     # HTTP gRPC Gateway
      - 9999:9999     # Websocket
    depends_on:
      forum-db:
        condition: service_healthy
      broker:
        condition: service_healthy

  kong:
    build:
      context: ./services/kong
      dockerfile: Dockerfile
    platform: "linux/arm64"
    container_name: kong
    image: jjlim159/uniexplorers-kong
    restart: always
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_PLUGINS: bundled,rate-limiting,custom-auth
      # KONG_SSL_CERT: /etc/kong/ssl/kong.ca-bundle
      # KONG_SSL_CERT_KEY: /etc/kong/ssl/kong.key
      # TODO: Add SSL Cert
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
      - "8445:8445"
      - "8003:8003"
      - "8004:8004"

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - 9090:9090
    healthcheck:
      test: ["CMD-SHELL", "nc -z -v localhost 9090"]
    volumes:
      - ./services/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - kong

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - 9091:9091
    healthcheck:
        test: ["CMD-SHELL", "nc -z -v localhost 9091"]
    volumes:
      - ./services/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./services/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./services/grafana/dashboards/kong-dashboard.json:/usr/lib/dashboards/kong-dashboard.json
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus

  telegram:
    container_name: telegram-app
    image: jjlim159/uniexplorers-telegram
    build:
      context: ./services/telegram
      dockerfile: Dockerfile
    env_file: 
      - ./services/telegram.env
      - ./services/urls.env
    restart: on-failure
    ports: 
      - 12069:12069
    depends_on:
      uni-server:
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:12069 || exit 1
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  uni-pg-data:
  forum-pg-data:
  user-pg-data:
  mongo-data:
  grafana-storage: